1.复习
	[1] 编程基础知识 - 有符号整数在计算机中的三种编码方式(原码、反码、补码)
		(1) 原码
			符号位  +  数值位
			[0/+]
			[1/-]			
		(2) 反码  
			正数 ：反码等于原码
			负数 ：符号位不变，数值位取反 
		(3) 补码
			正数 ：补码等于原码
			负数 ：反码 + 1
			
		(4) 计算机使用补码方式存储有符号整数 
	
	[2] 标识符与关键字 
		(1) C语言的字符集
			C语言的基本符号可以分为4类
			1)英文字母：大小写26个，共52个；
			2)阿拉伯数字：0-9共10个数字；
			3)下划线与分号：
			4)特殊符号：
				运算符：
					算术运算符：+、-、*、\、%、++、--
					关系运算符：<、>、>=、<=、==、!=
					逻辑运算符：&&、|| 、！
					位运算符：&   |    ~  ^  >>    <<
					条件运算符：? :
				分隔符:
					()   []  {}  .  ,  ;
		(2) 标识符  
			1) 标识符：用于标识变量名、符号常量名、函数名、类型名、文件名等的有效字符序列；
			2) 标识符的命名规则:  
				a.字母、数字、下划线; 首字符只能是字母或下划线 
				b.不能与C语言中的关键字同名
				c.大小写敏感
				
		(3) 关键字  
			关键字：对编译器具有特定含义的标识符，是标识符的一个特殊的集合。C语言内所有的关键字都是小写。
			
	[3] 变量
		(1) 变量的定义 
			数据类型 变量名; //先定义后使用
		(2) 变量的初始化&赋值
			1) 定义的同时赋值 
				数据类型 变量名 = 初始值;
			2) 先定义变量再赋值
				数据类型 变量名; 
				变量名 = 初始值;
		(3) 变量的实质
			一个变量实质上代表了内存中某个存储单元。在程序中，变量a就是指用a命名的某个存储单元，
		用户对变量a进行操作就是对该存储单元进行操作；
		(4) 地址  
			内存中的每个字节的空间都有一个编号，这个编号称为"地址"
		(5) 变量的地址
			变量的地址：变量在内存中总占用几个连续的字节，开始字节的地址，就是变量的地址。
			
	[4] 常量
		(1) 直接常量 ：直接引用的数字等；
			字符常量	‘A’ , ‘a’
			整型常量	10 100 0b1101  0664 0xaf
			实型常量	3.14 5.69
			字符串常量 	"hello world""100"

		(2) 符号常量 ：使用标识符来代替一个数字或字符串等（常见的：宏定义常量 和 常变量）
			1) 宏定义
					所谓宏定义，就是用一个标识符来表示一个字符串，如果在后面的代码中出现了该标识符，
				那么就全部替换成指定的字符串。
				
				a. 类对象宏(不带参数)
					#define 宏	替换体
				b. 类函数宏(带参数)
					#define 宏(参数) 替换体	
					
				总结：使用足够多的圆括号来确保运算和结合的正确顺序
			2) 常变量(只读变量)
				常变量：变量值不可改变的量，使用const修饰
				const int a = 10;//定义一个常变量

				const修饰后的变量会变成只读，因此无法再次赋值。因此初始化常变量需要在定义时直接赋值。
			
	[5]	C语言标准格式化输入和输出  
		(1) printf  
			#include <stdio.h>

			int printf(const char *format, ...);
				[1] format : 格式控制字符串 
					1) 普通字符：原样输入
					2) 格式说明符 : %[修饰符]格式字符，用于指定输入格式
						%d  整型数据 
						%c 	字符型数据 
						%f 	浮点型数据 
						...
				[2] ... : 不定参数(可变参数)
			
			
		(2) scanf
			#include <stdio.h>

			int scanf(const char *format, ...);
				[1] format : 格式控制字符串 
					1) 普通字符：原样输入 
					2) 格式说明符 : %[修饰符]格式字符，用于指定输入格式
						%d  整型数据 
						%c 	字符型数据 
						%f 	浮点型数据 
						...
				[2] ... : 输入变量的地址表（多个时以“,”分隔）
				
			注意： 
			scanf ("%d%d", &a, &b);	//默认的分隔符  空格"space", 制表符"Tab", 回车"Enter"
			
	[6] C语言数据类型  
		(1) 基本数据类型 
			整型 
			浮点型 
			字符型 
		(2) 构造类型  
			数组 
			结构体  
			联合体 
			枚举型
		(3) 指针类型 
		(4) 空类型 
			void 
			
	[7] 基本数据类型 -- 整型  
		(1) 整型的类型  
			短整型  	short int 或 short  
			普通整型	int  
			长整型		long int 或 long 
			
			有符号整型  signed 
			无符号整型  unsigned 
			
		(2) 整型的长度 
			2 ≤ short ≤ int ≤ long
			
		(3) sizeof 运算符 ：求变量或数据类型长度  
			sizeof(数据类型/变量名)
			
		(4) 整型常量的表示方式 
			1) 十进制形式 
			2) 八进制形式 
				八进制整常数必须以0开头，即以0作为八进制数的前缀。数码取值为0～7。
			3) 十六进制形式  
				十六进制整常数的前缀为0X或0x。其数码取值为0~9，A~F或a~f。
			4) 二进制形式 	
				二进制由 0 和 1 两个数字组成，使用时必须以 0b 或 0B（不区分大小写）开头
				注意并不是所有编译器都支持二进制 
			5) 整数的显示/打印方法 (printf)	
				a. 十进制形式 
					short	int		long
					%hd		%d		%ld 	
					%hu		%u 		%lu
				b. 八进制形式 
					short	int		long
					%#ho	%#o		%#lo 
				c. 十六进制形式 	
					short	int		long
					%#hx	%#x		%#lx
					%#hX	%#X		%#lX
			6) 整数溢出
				整数溢出程序不会报错，所以写程序时一定要小心，当达到最大值时会重新从起点开始。
	
	[8] 作业	
		将求圆面积的例子和租船改成const
		
		1) 使用宏定义PI来定义3.1415926，计算圆的面积
			const float pi = 3.1415926;
			
		2) 租船问题。
			写程序计算游客需要付的租船的费用。租船每小时30元，押金100元。游客输入租船时间，计算出租船费用。租船费用=时间*每小时钱数+押金。要求押金与每小时钱数使用宏定义
			const int yajin = 100; 
			const int prehour = 30;

================================================================================================================	
2.浮点型
	[1] 数据类型
		单精度		float型
		双精度		double型
		长双精度	long double型
	
	[2] 浮点数的表示形式
		【1】小数形式：由数码0~ 9和小数点组成。例如 0.0、 75.0、 4.023、 0.27、 -937.198 
			等都是合法的小数
		【2】指数形式：例如 7.25×(10^2)、 0.0368×(10^5)、 100.22×(10^-2)、 -27.36×(10^-3) 等。
		任何小数都可以用指数形式来表示。
			C 语言中小数的指数形式为：
				aen	或 aEn		//a*10^n
			说明:  
				a 为尾数部分，是一个十进制数；
				n 为指数部分，是一个十进制整数；
				E 或 e 是固定的字符，用于分割尾数部分和指数部分。
			示例: 
				2.1E5 = 2.1×(10^5)，其中 2.1 是尾数， 5 是指数。
				3.7E-2 = 3.7×(10^-2)其中 3.7 是尾数， -2 是指数。
				0.5E7 = 0.5×(10^7)，其中 0.5 是尾数， 7 是指数。
	
	[3] 浮点数在内存的存储方式
		(1) 国际标准IEEE 754
			根据国际标准IEEE 754, 任意一个二进制浮点数V可以表示成下面的形式：
			v = (-1)^s * M * 2^e
			
			说明: 
				s 表示符号位, s=0 则v为正数; s=1 则v为负数。
				M 表示有效数字, 大于等于1且小于2  
				e 表示指数位
				
			示例： 以2.5为例
				2.5 = 1*(2^1)+0*(2^0)+1*(2^-1) = 10.1 = 1.01 * 2^1 
					s = 0
					M = 1.01 
					e = 1
		
		(2) 单精度float的存储方式
			IEEE 754规定，对于32位的浮点数float(单精度)，最高的1位是符号位s，接着的8位用来表示指数e，
		剩下的23位用来表示标准有效数字M的小数部分f。
			
			|s: [31-1bit]| |e : [30:23-8bit]| |f : [22:0-23bit]|
			
			【示例】以50为例  
				50.0 = 0B 110010.00 = 1.1001 * 2^5 = (-1)^0 * 1.1001 * 2^5;
				
				s = 0;
				e = 5;	//e + 127 = 132
				f = 0.1001
				
				0 | 10000100 | 10010000.....
				
				Q1：为什么有效数字只保留小数部分？
				A1：是因为整数部分是肯定为1，所以直接被省略了，取数时候会自动加上1来计算
				
				Q2：上面的例子中，我们知道E代表的是幂的大小，而存入计算机的e则为E+127，那么问题来了，
				这里为什么要加上127这个数呢？
				A2：计算机表示单精度浮点数时，是用8位去存储指数部分，在数值上面，表示0~255，但是我们
				同样需要有负指数，正负指数的位数量为了均等，各自一半，-127~128。储存时候会加上127，
				这样就刚刚好是0~255，就能很好的储存了，不然的话，需要判断符号位来判断数值的正负。
					
			练习：求单精度浮点数123.125(十进制)在计算机中的表示	(先自己计算再使用gdb调试工具验证)	
				123.125 = 111 1011.001 = 1.11101100100 * 2^6 = (-1)^0 *　1.11101100100 * 2^6 ;
				s = 0;
				f = 0.11101100100
				e = 6
				
				0 | 1000 0101 | 11101100100....
				
				0 | 1000 0101 | 11101100100000000000000
			
		(3) 双精度double的存储方式（与float类似不详述了）
			Double型（双精度），64位，最高位为符号位，接着11位表示指数E，剩下52位表示有效数字M的小数部分。（可表达小数点后最多16位）
			
			double的指数(E)是11位，所以如果是double，指数值需要与1023（2^(11-1) – 1）相加
		
			|s 符号位 [63-1bit]| |e 指数位 [62:52-11bit]| |f 有效数字小数部分 [51:0-52bit]|

			作业：求双精度浮点数123.125(十进制)在计算机中的表示	(先自己计算再使用gdb调试工具验证)	
			
		(4) 不同类型浮点数的取值范围(32bit机器)
			类型			位数	有效位数	取值范围
			float			32位	6~7位		10^-38 ~ 10^38           
			double			64位	15~16位		10^-308~10^308
			long double		96位	18~19位		10^-4932~10^4932
		
			取值范围看指数部分：
				float是有符号型，其中，8位指数位，可表达范围为=[-127,128]，因此实际的范围是2^-127—2^128，约为1.7E-38~3.4E38（以10为底）, 
			精度是看尾数部分：
				float尾数位23位，2^23=8.3E6=8388608，即1. 8388608 表示小数点后最多7位 
			
		(5) 浮点数的输出格式
				小数也可以使用 printf 函数输出，包括十进制形式和指数形式，它们对应的格式控制符分别是：
			%f:输出十进制计数法的float和double数字；
			%e：输出指数计数法的float和double数字；
			%lf、%le：输出double类型的数字；
			%Lf、%Le：输出long double类型的数字；
			
			#include <stdio.h>

			int main(int argc, const char *argv[])
			{
				float a = 0.302;
				double b = 123.0;
				long double c = 0.7623e-2;

				printf("a = %f, a = %e\n", a, a);
				printf("b = %f, b = %e\n", b, b);
				printf("b = %lf, b = %le\n", b, b);
				printf("c = %Lf, b = %Le\n", c, c);
				
				return 0;
			}

			
		(6)浮点数的溢出  
			对于浮点数，有上溢和下溢两种情况。试图存储绝对值很小的数将导致下溢的情况，而试图存储绝对值很大的数将导致上溢的情况。
			
			#include <stdio.h>
			#include <float.h>

			int main(int argc, const char *argv[])
			{
				float f_max = FLT_MAX * FLT_MAX;
				float f_min = FLT_MIN / FLT_MAX;

				printf("f_max = %f\n", f_max);
				printf("f_max = %f\n", f_min);
				
				return 0;
			}
		
		练习：一个水分子的质量约为3.0*10^(-23)g, 1夸脱水大约950g, 编写程序，要求输入水的夸脱数，
			然后显示这么多水中包含多少水分子？
			
			#include <stdio.h>

			int main(int argc, const char *argv[])
			{
				float m = 3.0e-23;
				float w = 950.0;
				float k = 0.0;

				printf("请输入水的夸拖数 : ");
				scanf("%f", &k);

				printf("%f 夸拖水它有%e的水分子数\n", k, (w / m) * k);
				return 0;
			}
			

3.字符型（char 1byte）
	[1] 字符在计算机内的表示
		ASCII码（American Standard Code for Information Interchange）字符集。基本ASCII码标准定义了128个字符，
	用七位二进制来编码，包括英文大写字母26个、小写字母26个、数字符号0~9十个，还有一些专用符号（如“：”、“！”、“%”）
	及控制符号（如换行、换页、回车等）。
	
		man 7 ascii
	[2] 字符常量
		字符常量是用单引号括起来的一个字符；注意只能是英文的单引号，如’a’、’D’、’+’、’?’等都是字符常量。
	注意字符常量只能是单字符，不能是字符串，不能用双引号。
	
	[3] 字符变量
		符变量使用类型字符char定义的变量。char是英文character（字符）的缩写。
		字符变量实质上是的整型变量的一种，一般占用一个字节(8bit)
		
		例如，char c = '?';
		定义一个字符变量c并使初值为字符’?’。’?’的ASCII代码是63，系统把整数63赋给变量c
	
	[4] 取值范围
		类型			位数	取值范围
		[signed] char	8位		-128 ~ 127
		[unsigned]char	8位		0 ~ 255
		
	[5] 转义字符	
		转义字符具有特殊的含义，不同于字符原有的意义，故称”转义”字符。例如，’\n’就是一个转义字符，其意义是“回车换行”
		
		\a: 蜂鸣，响铃 
		\b: 回退：向后退一格 
		\f: 换页
		\n: 换行，光标到下行行首 
		\r: 回车，光标到本行行首 
		\t: 水平制表 
		\v: 垂直制表
		\\: 反斜杠    ‘\’’
		\': 单引号 
		\": 双引号 ‘\”’
		\ddd: 1到3位八进制数所代表的字符
		\xhh: 1到2位十六进制数所代表的字符 
		\0: 空字符(NULL),什么都不做	
	
4.GDB 软件调试工具  
使用方法： 
	gcc 编译程序时需要添加 -g 选项(增加调试信息)
	
	gdb 程序名		//进入gdb调试界面
	
	gdb 工具指令
		l : 显示代码 		（list）
		b + 行号  : 添加断点 (程序运行到断点处会停止 ) (break point)
		r : 运行代码 		(run)
		n : 单步运行		(next)
		p + 变量、变量地址  ： 显示变量的值或地址	(print)
		x : 查看内存的内容 
			命令格式：x/nfu <addr>
				n : 表示要显示的内存单元个数
				f : 表示显示方式, 可取如下值
					x 按十六进制格式显示变量。
					d 按十进制格式显示变量。
					u 按十进制格式显示无符号整型。
					o 按八进制格式显示变量。
					t 按二进制格式显示变量。
					a 按十六进制格式显示变量。
					i 指令地址格式
					c 按字符格式显示变量。
					f 按浮点数格式显示变量。
				u表示一个地址单元的长度，与n一起表示显示的地址长度
					b表示单字节，
					h表示双字节，
					w表示四字节，
					g表示八字节
		q: 退出
		
			eg: x/1fw <addr>	
				
			eg: x/1tw <addr>
			01000010010010000000000000000000
			0 | 10000100 | 10010000000000000000000
			
			(gdb) x/1tw 0xbffff34c
			0xbffff34c:	0 10000100 10010000000000000000000		


5. 数据类型转换 
	[1] 隐式类型转换(自动转换)	
		在有多种数据类型混合计算的时候，若未人为控制类型，系统会自动进行类型转换。
		转换的规则是：存储长度较短的转换成存储长度较长的，且不丢失数据。
		
		char -> short -> int -> unsigned int -> long  -> unsigned long -> double  
															float      -> double
		#include <stdio.h>

		int main(int argc, const char *argv[])
		{
			int a = -6;
			unsigned int b = 1;

			if ( a + b > 0) {
				printf("Yes\n");
			} else {
				printf("No\n");
			}
			
			return 0;
		}


	[2] 赋值转换
		如果赋值运算符两侧数据类型不一致，则在赋值时会发生赋值类型转换
		
		(1) 浮点型与整型赋值转换
			【1】将浮点型数据赋给整型变量时，舍弃浮点数的小数部分。
				例：int i = 3.56; //此时i的值为3
			【2】将整型数据赋给浮点型变量时，数值不变，但以浮点数形式存储到变量中
				例：float f = 23; //此时f的值为23.0
		(2) double型与float型赋值转换	
			【1】将一个double型数据赋给float变量时，截取其前面7位有效数字，存放到float变量的存储单元（4个字节）中。
			但应注意数值范围不能溢出
			【2】如果将一个float型数据赋给double变量时，数值不变，存储方式与有效位数与double类型保持一致；
				#include <stdio.h>
				int main(int argc, const char *argv[])
				{
					float f;
					double d = 123.456789e10;

					f = d;
					printf("d = %.8e\n, f = %.8e\n", d, f);
					
					return 0;
				}	
		(3) 字符型与整型赋值转换
			【1】将一个整型数据赋给一个char型变量时，只将其低8位原封不动地送到char型变量（即截断）
				#include <stdio.h>
				int main(int argc, const char *argv[])
				{
					unsigned int a = 0x12345678;
					unsigned char b;

					b = a;
					
					printf("%x\n", b);
					
					return 0;
				}

			【2】字符型数据赋给整型变量时，将字符数据放到整型变量存储单元的低8位中。
				①　	对于无符号字符类型，则将字符的8位放到整型变量低8位，高24位补零；
				②　	对于有符号字符类型，若字符最高位为0，则整型变量高24位补0；若字符最高位1，则高24位全补1				
				#include <stdio.h>
				int main(int argc, const char *argv[])
				{
					int a;
					char b = 1;	//-128～127
					char c = -1;

					a = b;
					printf("%#x\n", a);
					a = c;
					printf("%#x\n", a);
					
					return 0;
				}
				
			总结：类型升级通常不会有什么问题，但是类型降级却会带来不少问题。例如：Char Ch = 1222;1222 降级为 Char，
			但 Char 无法表示 1222。再如：Int J = 22.2; 22.2 降级为 Int，小数部分被截断。

			练习：分析类型转换过程  
				char ch; 
				int i, result;
				float f; 
				double d; 
				result = (ch / i) + (f * d) - (f + i);
				
			分析：
			1)	首先计算 ch/i, ch → int型，ch/i → int型。
			2)	接着计算 f*d，由于最长型为double型，故f→double型，f*d→double型。
			3)	(f+i), f为float，i-> float, (f+i)->float
			4)	(ch/i) 和(f*d)和（f+i)进行加减运算，由于有一项为double型，故ch/i→double型，(f + i)→double型。最后右边的表达式为double型。
			5)	最后一步为赋值运算，由于result为int型，故右边的表达式→int，即进行截断与舍入，最后取值为整型。
	
	[3] 强制类型转换
		强制类型转换：人为地将某类型转换为另一类型
		强制类型转换符: ()
			(类型名) 表达式；

		示例 ：
			(double) a       将ａ转换成double类型
			(int) (x + y)      将x+y的值转换成整型
			(float)(5 % 3)    将5%3的值转换成float型
			int *p; 
			(float *)p; 
		练习：分析类型转换过程，以及x 最后的值
			float f, r; 
			float x; 
			f = 3.14159;
			r = 2.5; 
			x = (int)f * (int)r * (int)r;
					3 * 2 * 2;
				
6.运算符与表达式 
	[1] 基本概念
		(1) 运算符			
			C语言中用于告诉程序执行特殊算术或逻辑操作的符号称为运算符，
			运算的对象称为操作数。
			
		(2) 表达式
			用运算符和括号将操作数连接起来的符合C语言语法规则的句子称为表达式。
			
		(3) 运算分类
			【1】根据结合数的数目分类：
				单目运算符：即操作数只有1个的运算符 +/-
				双目运算符：即操作数有2个的运算符 +, - 
				三目运算符：即操作数有3个的运算符，只有一个（ ?: ）
			【2】根据运算符的用途分类：
				赋值运算符：如=及其扩展运算符
				逻辑运算符：如&&（与）、||（或）、!（非）
				算数运算符：如+ - * / %等
				关系运算符：如> < >= <= == !=等
				位运算符：如<< >>等
				条件运算符：只有一个 ?:
				逗号运算符：只有一个 , 用于分隔
				
		(4) 运算结合方向
			运算符有两种结合顺序：自左至右、自右至左
			
			1)自左至右（左结合性）：表示运算符的操作数是从左向右（先左再右）与运算符结合的，如加法+
				例：3 + 4 + 5，即3加上5，先取3，再取+，再取5
			2)自右至左（右结合性）：表示运算符的操作数是从右向左（先右再左）与运算符结合的，如赋值=
				例：a = 3 + 4，即先取数3，再给a赋值
				
		(5) 运算符的优先级	
			C语言中运算符有优先级，从高到低分为15级（不同书籍划分方式不同，级数不同，这里采用百度百科划分方式）;
		1级优先级最高，15级最低。
		
			简单记就是：！ > 算术运算符 > 关系运算符 > 逻辑运算符(&& > ||) > 赋值运算符
			
			注意： 同一优先级的运算符，结合次序由结合方向所决定。
	
	[2] 算术运算符
		(1) 四则运算符和求模运算符
			符号及含义：+（加） -（减） *（乘） /（除） %（取余）
			结合性：自左至右
			优先级：+和-：4级。*和/和%：3级
			使用方法：表达式 运算符 表达式。如：3+5   a-b等

			注意:  
				①　C语言中，若相除2个数都是整数，则计算/时只取商，余数部分被舍去。
				②　	% 的操作数必须是整数	

			作业:从键盘输入5个学生的成绩（整数），要求输出总成绩（整数）和平均成绩（小数）
			
		(2) 正运算符和负运算符
			符号及含义：+（正数） -（负数）
			数目：单目运算符
			结合性：自右至左
			优先级：2级
			使用方法：+表达式 或 -表达式。如：
			
			#include <stdio.h>

			int main(int argc, const char *argv[])
			{
				int a = -10;

				printf("%d\n", -a);
				
				return 0;
			}
		(3) 自增运算符和自减运算符
			符号及含义：++（自增1） --（自减1）
			数目：单目运算符
			优先级：2级
			使用方法：
			自增；变量++ 或 ++变量。如a++ 或 ++a
			自减：变量-- 或 --变量。如b-- 或 --b

			
			注意：
			①　	自增或自减运算符仅用于变量，不能用于常量或表达式
			②　	注意++/--运算符与+/-（正数/负数运算符）是同等优先级。
				当这两个运算符一起使用时，是右结合性。即--a++ <---等价于---> --(a++);
			③　	自增或自减运算符可用在操作数之前，也可以放在其后，这两种用法稍有区别：
				1)运算符在操作数前时：
					C语言在引用操作数之前那就先执行加1或减1，例如：j = ++i;其执行过程是，先将变量i+1,再将计算结果赋给j。
				2) 运算符在操作数后时：
					C语言先引用操作数的值，然后再进行加1或减1, 例如：j= i--;其执行过程是，先将变量i的值赋值给j;再执行将变量i-1。
			
			练习：读以下程序，猜想输出的结果，再执行程序检验自己的猜想		
			


		
	作业1：求双精度浮点数123.125(十进制)在计算机中的表示	(先自己计算再使用gdb调试工具验证)	
	作业2:从键盘输入5个学生的成绩（整数），要求输出总成绩（整数）和平均成绩（小数）
	



			
		
	
				
			



















