1.复习
	[1] 常用指令
		(1) 用户相关 
			1) su 	--	切换用户
				su username
			2) sudo --	临时获取超级用户权限 
				sudo command
			3) passwd -- 修改密码 
				passwd username 
			4) shutdown -- 定时关机  
				shutdown -h time
		(2)	获取帮助  Linux user manual 
			man 手册 
			man [page] [option] 查询的内容
		(3) 目录浏览
			1) pwd -- 显示 当前的绝对路径 
			2) ls  -- 列举目录内容 
				ls [-options] [dir]
					-a 	查看隐藏文件 
					-r	逆向显示
					-R 	递归显示子目录下的文件 
					-l 	显示详细信息
				文件类型：
					1) 普通 -
					2) 目录 d 
					3) 链接 l  
					4) 管道 p  
					5) 字符设备 c 
					6) 块设备   b  
					7) 套接字 s  
				访问权限:
					拥有者 		用户组		其他用户  
					r 	-- 	可读 
					w   --  可写 
					x   --  可执行 
					-   --  无权限
			3) chmod  -- 修改文件访问权限  
				chmod [8进制权限码] file  
			4) cd   --  切换目录  
				cd 路径 
				
		(4) 文件操作
			1) mkdir  --  创建目录  
				mkdir [-options] path/dir
						-p   递归创建子目录  
			2) touch  --  修改文件访问时间，如果文件不存在则创建   
				touch [-t time] file
			3) rm   --	删除文件/目录   
				rm [-options] file 
					-r 		删除文件夹  
			4) rmdir --	删除空文件夹 
				rmdir [-options] file 
			5) cp -- 拷贝文件或目录  
				cp 源文件 目标文件
					-a 		拷贝文件夹
			6) mv -- 移动/重命名 
				mv 源文件  目标文件 
				1) 目标文件是存在的文件夹，mv表示移动  
				2) 目标文件不存在 ，mv表示重命名
			7) cat -- 查看文件内容
				
	[2] vim 编辑器
		(1) 打开编辑器  
			vi/vim + 	path/filename
		(2) 工作模式 
			1) 命令模式  默认进入的模式，可以切换到其他模式，可以执行一些命令 如 光标移动,复制粘贴,撤销等
			2) 插入模式  编辑模式  
			3) 底行模式  保存文件，退出编辑器，搜寻，替换，设置环境等操作
		(3) 模式转换  
		(4) 命令模式 
			1) 光标移动  
				h,j,k,l
				b,e,w 
				0,$
				gg,G
				G$
			2) 复制粘贴  
				yy,dd 
				nyy,ndd 
				y$,d$ 
				p,P
			3) 撤销&恢复  
				u & ctrl + r 
		(5) 底行模式 
			1) 文件保存&退出  
				:w 
				:q 
				:w path/filename
				:w! 
				:q!
			2) 查询  
				/ 或 ?
				/<查询的字符串>
				?<查询的字符串>
				
				:set nohl 
				:set hlsearch
				
				n或N
			3) 替换
				:[range][s]/string1/string2/[g][c]
			
	作业1：  
		1)在当前用户的家目录下创建 21121 和 21122 和 21123 三个目录
			fs@ubuntu:~$ cd
			fs@ubuntu:~$ mkdir 21121 21122 21123
		2)在 21121目录下 创建四个文件 file1 file2 file3 file4 和 两个目录 day1 day2 
			fs@ubuntu:~$ cd 21121
			fs@ubuntu:~/21121$ touch file1 flie2 flie3 file4
			fs@ubuntu:~/21121$ mkdir day1 day2
		3)将 day1 file1 file4 拷贝到 21122目录
			fs@ubuntu:~/21121$ cp -a day1 file1 file4 ../21122
		4)将 day2 file2 file3 剪切到 21123目录 
			fs@ubuntu:~/21121$ mv day2 file2 file3 ../21123
		5)删除 21121目录下的所有内容
			fs@ubuntu:~/21121$ rm -rf *
		6)删除 21121目录 
			fs@ubuntu:~$ rm -r 21121
		7)将21123目录下的所有内容拷贝到21122目录
			fs@ubuntu:~$ cp -a 21123/. 21122
			//fs@ubuntu:~$ cp -a 21123/* 21122
		8)删除 21123目录 
			fs@ubuntu:~$ rm -r 21123
		9) 将 21122 目录拷贝到根目录并重命名为 2021
			fs@ubuntu:~$ sudo cp -a 21122 /2021
		10) 删除 2021 目录下除了file1和file3以外所有的文件和目录
			fs@ubuntu:/2021$ rm -rf !(file1|file3)
		11) 删除 2021目录 	
			fs@ubuntu:/2021$ cd ..
			fs@ubuntu:/$ sudo rm -r 2021
		补充：
			[1] 通配符  
				* 	匹配任意数量的任意字符  所有
				?	匹配任意一个字符
				[]	匹配括号内的一个字符
			[2] 排除文件  
				!(filename|filename|...|...)
			
		
	作业2: 
		使用vi输出创建文件，键入内容并保存。内容要求和vi.c一致。
	作业3： 
		整理笔记按照上课说的要求并粘贴到日志中	

========================================================================================
2. vim 编辑器   
	[1] 底行模式的其他操作  
		(1) 设置光标（ubuntu文件内容向拷贝到windows）
			:set mouse=  可以右键拷贝
			:set mouse=a 不可以右键拷贝
		或者: 
			按着shift键，鼠标选中想要拷贝的行，
			松开shift，右键拷贝

		(2) 跳转到对应行号
			:n	跳转到第n行
		
		(3) 设置行号是否显示
			:set nonu  取消行号
			:set nu    显示行号
			
		(4) 文件的插入
			:r path/filename	将文件中的内容插入到光标所在的位置	
			
		(5) 分屏显示  
			:vsp 路径/文件的名字 
			:sp 路径/文件的名字  
		
	[2] vim 编辑器配置(可选)
		(1) 拷贝 vim_t.tar.gz 到 ubuntu 
		(2) 解压 vim_t.tar.gz
			fs@ubuntu:~$ tar -xvf vim_t.tar.gz
		(3) 修改文件权限  
			fs@ubuntu:~$ chmod 777 .vim* -R
		(4) 下载ctags插件  
			ping www.baidu.com  
		
		Ubuntu 12.04 需要替换软件源，高版本Ubuntu 可以直接更新软件源，再下载软件
			1) 替换软件源 : 将 source.list 拷贝到虚拟机中的 /etc/apt
				fs@ubuntu:~$ sudo cp sources.list /etc/apt
			2) 更新软件源 :
				fs@ubuntu:~$ sudo apt-get update
			3) 下载 ctags 插件
				fs@ubuntu:~$ sudo apt-get install ctags
		(5) 修改作者信息  
			fs@ubuntu:~$ vim .vimrc
			
			修改 11 ~ 30的 作者信息 
	
	[3] vim adventures 
		https://vim-adventures.com/
		
2. 编程语言基础 
	[1] 什么是程序 program
		1) 广义的讲，为了实现一个特定的目标而预先设计的一组可操作的工作步骤就可以称之为一个程序
		2) 程序（program）是为实现特定目标或解决特定问题而用计算机语言编写的命令序列的集合。
			•	程序存储在磁盘上，被加载到内存中，计算机系统从内存中逐条读取指令并执行
			
	[2] 什么是编程语言  
		编程语言（Programming Language） : 可以控制计算机为我们做事情，的语言即编程语言。
		程语言有很多种，常用的有 C 语言、 C++、 Java、 C#、 Python、 PHP、 JavaScript、 Go 语言、
	Objective-C、 Swift、汇编语言等，每种语言都有自己擅长的方面
	
		C语言 : 单片机开发、嵌入式软件开发、底层技术
		C++   : 在C语言的基础上发展起来，PC机上的软件开发、嵌入式软件开发、游戏开发 ... 
		Java  : 通用型极强的编程语言，网站后台开发、Android开发、大数据开发 ... 
		C#	  : 微软推出的编程语言、主要用于Windows平台开发 
		Python: 系统运维、数据分析、网络爬虫、人工智能  
		Object-C & Swift : 苹果公司推出的编程语言，主要用于苹果产品的开发 
		...... 
		
	[3] 编程语言发展简史
		(1) 机器语言
			送入计算机的数字，字母，符号等信息必须转换成0、1组合的数据形式才能被计算机接收、
		存储并进行运算。因此早期直接使用机器指令(0，1序列)来设计程序，可以被计算机系统直接识别。
		和自然语言完全不同，难于记忆和理解，工作量大，效率低，无法移植。
		
		(2) 汇编语言
			汇编语言（assembly language）可以视为机器语言的升级版，使用助记符代替机器语言的二进制码，
		把机器指令符号化，即通过一组简单的的符号来表示机器指令，更接近于自然语言，更容易理解和使用。
		
		10000110000110001111100001111000
		如：
			MOV  R1, #1000     //R1=1000
			ADD  R1, R1, R2   	//R1=R1+R2
			...
		通常情况下来说，不同的机器指令集对应不同的汇编语言，因此不同版本的汇编语言不可直接移植。
						Intel X86  =>	ARM 
								   =>   MIPS 
								   =>   PowerPC
								   
		(3) 高级语言 
			语法接近人类的自然语言；执行的单位不是指令，而是语句；开发效率较高；
		必须编译成机器码；移植性较好；
		
		(4) 自然语言
			运用人工智能，以接近口音的指令指挥计算机; 还没有成熟;

	[4] 编程语言的分类
		(1) 按照编程语言的运行方式，将编程语言分为： 
			1) 编译型语言: 需要借助编译器，在程序运行前将代码转换成二进制的可执行程序,（如 C,C++）
			2) 解释型语言: 需要借助解释器，在程序运行过程中将代码逐条翻译成二进制指令再运行(如 python, php, shell 脚本)
		(2) 按照编程语言的属性和发展过程，将编程语言分为： 
			1) 面向过程的语言: 重点在描述解决问题的过程 (如C语言、Pascal语言) 
			2) 面向对象的语言: 重点在描述对象(如C++、Java、Python、Objective-C等) 
			
3. C语言	
	[1] 特点  
		C语言属于面向过程的编译型语言。是美国Dennis Ritchie在1972年设计发明的，
	它由早期的编程语言BCPL（Basic Combined Programming Language）发展演变而来。
		自C语言主体诞生年。它经历过几个修订版本，其中影响比较大的是1989年修订的C89版与1999年修订的C99版。
	C89版也是当代C语言通行的基础版本。
	
	缺陷：
		C的指针容易造成困惑和程序错误，对初学者较难掌握，但用多了才会体会到其强大。
	同时C缺乏对OOP的支持，所以后来的C++和Java解决了这些问题。
		Linux 内核中 C语言实现面向对象。
		
	[2] Hello World
		#include <stdio.h>
                                                                                               
		int main(int argc, const char *argv[])
		{
		¦   printf("Hello World!\n");		//C库函数
		¦   
		¦   return 0;
		}
		说明： 
			#include <stdio.h>：标准I/O头文件，下文中的printf需要使用这个文件
			main()：主函数，一个程序的入口。一个程序有且只有一个main()函数
			int：代表主函数的返回值类型是int型
			printf()：格式化输出，将括号内的内容打印到显示器上，打印字符串需要用双引号""引上		
			c语言每句话结束都要使用;
			习惯上 main的返回: 
				return 0 ;	//成功结束 
				return -1;	//失败结束
		
		注意：
			每种编程语言的源文件都有特定的后缀，以方便被编译器识别，被程序员理解。
		源文件后缀大都根据编程语言本身的名字来命名，例如：
			C 语言源文件的后缀是.c；
			C++语言（C Plus Plus）源文件的后缀是.cpp；
			Java 源文件的后缀是.java;
			Python 源文件的后缀是.py.；
			JavaScript 源文件后缀是.js。
			头文件 后缀是 .h

4. 编译器 
	[1] 什么是编译器	
		将 C 语言代码转换成 CPU 能够识别的二进制指令，也就是将代码加工成 .exe 程序的格式；
	这个工具是一个特殊的软件，叫做编译器（Compiler）。	

	[2] GCC 编译器   
		GNU (GNU is not Unix) 开源软件组织，倡导软件开源
	GCC是 GNU 推出的功能强大，性能优越的多平台编译器，作为自由软件。
		Richard stallman在刚开始编写GCC的时候，只是把它当作一个C程序的编译器，
	GCC的意思也只是GNU C Compiler而已，经过多年的发展，GCC除了能支持C语言，目前还支持C++、Java、Objective C等。
	
	Gcc指令的格式：
		gcc [options] [filenames] 
		这里option是GCC使用时的一些选项，通过指定不同的选项GCC可以实现强大的功能。
	（gcc有超过100个的编译选项可用。具体的可以使用命令man gcc察看）。这里的filename则时GCC要编译的文件。
	
	实例：
		【1】查看gcc的版本
			gcc -v					
		【2】编译源码	-o的作用：指定生成的产物的名字。如果不加-o和名字，则gcc会默认生成a.out文件
			gcc hello.c -o hello	
		【3】运行程序
			./程序名 
			./hello
			
	[3] GCC编译流程分析
		(1) 预处理 : 去掉注释，处理以#开头的预处理指令(如,加载头文件，代替宏定义，条件编译 ...)
			-E  只预处理，不做其他处理  
		指令格式： 	
			gcc -E [源文件] -o [目标文件]
		实例：gcc -E hello.c -o hello.i
			后缀名为”.i”的文件是经过预处理后的C原始程序。
		
		(2) 编译 : 编译阶段的主要工作是把我们的源代码生成相应的汇编代码的过程。它需要对我们的C语言进行语法
			和语义的分析，还需要优化我们的代码，最终生成汇编代码。
			-S 只编译不汇编，生成汇编代码  
		指令格式：  
			gcc -S [源文件] -o [目标文件]
		实例：gcc -S hello.i -o hello.s
		后缀名为”.s”的文件是汇编语言原始程序。
			
		(3) 汇编 : 把汇编语言翻译成计算机能识别的机器语言，这个翻译的过程是在汇编阶段完成的。
			-c 	只编译，不进行链接
		指令格式：  
			gcc -c [源文件] -o [目标文件]
			
		实例：gcc -c hello.s -o hello.o
		
			C 语言代码经过编译以后，并没有生成最终的可执行文件（.exe 文件），而是生成了一种叫做
		目标文件（Object File）的中间文件（或者说临时文件）。目标文件也是二进制形式的，它和可执行
		文件的格式是一样的。
			
		(4) 链接 ：将一个或者多个目标文件外加库链接为一个可执行的文件。
			gcc [源文件] -o [目标文件]
		实例：gcc hello.o -o hello
		
		如果源码是多个文件时：
			gcc 1.c 2.c 3.c ... -o XXX 

	作业：  
		1. 编写程序，输出“XXX欢迎来到华清远见！”（XXX是自己的名字）
		2. 使用GCC编译器 编译昨天写的 vi.c，如果有错误自己试着解决。

5. C语言编码规范及注释
	[1] 注释用于描述特定的命令、函数或程序，增强程序的可读性，是编写程序代码的人为
	了方便理解代码所写的文本，被注释的文本不会被执行（因为在预处理阶段被删除）
	常见注释有两种：
		行注释：使用//，注释一行
		块注释：使用/**/，注释一段，多行注释用/*开始，用*/结束（标准C语言）
		
	[2] C语言 编码规范
		Linux Kernel  参考 CodingStyle 
		
6. C语言编程基础知识
	[1] 数据在计算机中的存储形式（二进制形式存储）
		计算机要处理的信息是多种多样的，如数字、文字、符号、图形、音频、视频等，
	这些信息在人们的眼里是不同的。但对于计算机来说，它们都是一样的，都是以0、1组
	合的数据（二进制）形式。
		二进制  	导通  	1
					截止	0
		e = 2.718..
		前苏联	三进制计算机。
					高电平  1 
					低电平  -1 
					截止    0
					
	[2] 计算机中的常用单位
		1 个元器件称为 1 比特（Bit） 或 1 位
		8 个元器件称为 1 字节（Byte） 
		8×1024 个元器件	1024 字节（Byte）简写为 1KB； 
		8×1024×1024 个元器件就是 1024KB，简写为 1MB；
		8×1024×1024×1024 个元器件就是 1024MB，简写为 1GB。
		8×1024×1024×1024×1024 个元器件就是 1024GB，简写为 1TB。
		8×1024×1024×1024×1024×1024 个元器件就是 1024TB，简写为 1PB。	
		8×1024×1024×1024×1024×1024×1024 个元器件就是 1024PB，简写为 1EB。
		...... 
		
		我们平时使用计算机时，通常只会涉及到 KB、 MB、 GB、 TB 这几个单位，
		PB 和 EB 这两个高级单位一般在大数据处理过程中才会用到。
		
	[3] 进位制
		(1) 什么是进位制
			凡是按进位的方式计数的数制叫做进位计数制，简称进位制或进制。
				进行加法运算时逢 X 进一（满 X 进一），进行减法运算时借一当 X，这就是 X 进制，
			这种进制也就包含 X 个数字，基数为 X。十进制有 0~9 共 10 个数字，基数为 10，在加减法运算中，
			逢十进一，借一当十
			
			计算机中常见的进位制或进制，例如：十进制、二进制、十六进制、八进制。
			
		(2) 二进制
			以2为基数的进位计数制即二进制（Binary） 。
			对于二进制，进行加法运算时逢二进一，进行减法运算时借一当二。
			
		(3) 八进制  
			八进制有 0~7 共 8 个数字，基数为 8，加法运算时逢八进一，减法运算时借一当八。
			
		(4) 十六进制
			十六进制中，用 A 来表示 10， B 表示 11， C 表示 12， D 表示 13， E 表示 14， F 表示 15，
		因此有 0~F 共 16 个数字，基数为 16，加法运算时逢 16 进 1，减法运算时借 1 当 16。
		
	[4] 进制转换  
		(1) 将二进制、八进制、十六进制转换为十进制
			二进制、八进制和十六进制向十进制转换都非常容易，就是“按权相加”。
			
			假设当前数字是 N 进制，那么：
				对于整数部分，从右往左看，第 i 位的位权等于 N^(i-1)
				对于小数部分，恰好相反，要从左往右看，第 j 位的位权为 N^(-j)。
			示例1，将八进制数字 53627 转换成十进制：22423 
			示例2，将十六进制数字 9FA8C 转换成十进制：653946
			示例3：将二进制数字 11010 转换成十进制: 26
		
			小数部分
			示例1：将八进制数字 423.5176 转换成十进制：
			示例2：将二进制数字 1010.1101 转换成十进制：10.8125
			
		作业: 
			二进制：1001
			二进制：101.1001
			八进制：302
			八进制：302.46
			十六进制：EA7 
		(2)  将十进制转换为二进制、八进制、十六进制
			1) 整数部分  
				十进制整数转换为 N 进制整数采用“除 N 取余，逆序排列”法。
				
				十进制整数转换为 N 进制整数采用“除 N 取余，逆序排列”法。具体做法是：
				①　	将 N 作为除数，用十进制整数除以 N，可以得到一个商和余数；
				②　	保留余数，用商继续除以 N，又得到一个新的商和余数；
				③　	仍然保留余数，用商继续除以 N，还会得到一个新的商和余数；
				④　	……
				⑤　	如此反复进行，每次都保留余数，用商接着除以 N，直到商为 0 时为止。
				把先得到的余数作为 N 进制数的低位数字，后得到的余数作为 N 进制数的高位数字，依次排列起来，就得到了N 进制数字。
				将十进制数字 42 转换成二进制 : 101010 
			
			2) 小数部分 
				十进制小数转换成 N 进制小数采用“乘 N 取整，顺序排列”法。具体做法是：
				①　	用 N 乘以十进制小数，可以得到一个积，这个积包含了整数部分和小数部分；
				②　	将积的整数部分取出，再用 N 乘以余下的小数部分，又得到一个新的积；
				③　	再将积的整数部分取出，继续用 N 乘以余下的小数部分；
				④　	……
				⑤　	如此反复进行，每次都取出整数部分，用 N 接着乘以小数部分，直到积中的小数部分为 0，
				把取出的整数部分按顺序排列起来，先取出的整数作为 N 进制小数的高位数字，后取出的整数作为低位数字，这样就得到了 N 进制小数。
					
		(3) 二进制和八进制、十六进制的转换
			1）二进制整数和八进制整数之间的转换
				二进制整数转换为八进制整数时，每三位二进制数字转换为一位八进制数字，运算的顺序是从低位向高位依次进行，
			高位不足三位用零补齐。
			
				八进制整数转换为二进制整数时，思路是相反的，每一位八进制数字转换为三位二进制数字，运算的
			顺序也是从低位向高位依次进行。
	
			2) 二进制整数和十六进制整数之间的转换
				二进制整数转换为十六进制整数时，每四位二进制数字转换为一位十六进制数字，运算的顺序是从
			低位向高位依次进行，高位不足四位用零补齐。
				
				十六进制整数转换为二进制整数时，思路是相反的，每一位十六进制数字转换为四位二进制数字，运算的顺
			序也是从低位向高位依次进行。
			
			作业:  进制转化
				0x4cfd81 转化为八进制
				0x4003f  转化为二进制
				061345   转化为二进制
				37.125    转化为二进制
				
				


	
	
	
	