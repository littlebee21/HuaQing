1.复习
	[1] 关系运算符 
		符号及含义：>（大于） <（小于） >=（大于等于） <=（小于等于） ==（判等） !=（不等）
		数目：双目运算符
		结合性：自左至右
		优先级：> < >= <=：6级。==和!=：7级
		
		注意: 
			1)关系表达式的的值是一个逻辑值：
			2)关系成立，即为真，结果为1；关系不成立，即为假，结果为0
			3)逻辑真值和逻辑假值在c里是如何表达的？
				0 表示逻辑假 ：如0、0.0、\0、NULL
				非0表示逻辑真：而且非零不一定是整数，可以是任何类型
		
	[2] 逻辑运算符 
		符号及含义：&&（逻辑与） ||（逻辑或） !（逻辑非）
		数目：!为单目运算符，&&和||为双目运算符
		结合性：!为自右至左，&&和||为自左至右
		优先级：!：2级、&&：11级、||：12级
		
		使用方法：
			&&和||：表达式 运算符 表达式。如：a && b、a || b
			!：!表达式。如!a
			
		注意：
			①　	逻辑与：当且仅当两个表达式都为真时，则计算结果为真。否则为假
			②　	逻辑或：当且仅当两个表达式都为假时，则计算结果为假。否则为真
			③　	逻辑非：当原表达式为真时，计算结果为假；当原表达式为假时，计算结果为真
			④　	使用逻辑运算符的表达式结果为真(1)或假(0)；
			
		短路现象: 
			表达式1 && 表达式2		如果表达式1为假，则不计算表达式2
			表达式1 || 表达式2		如果表达式1为真，则不计算表达式2
			
	[3] 条件运算符 
		符号及含义：?:（判断?前表达式是否成立，若成立取:前表达式，否则取:后表达式）	
		数目：三目运算符（C语言中唯一的三目运算符）
		结合性：自右至左
		优先级：13级
		使用方法：表达式1?表达式2:表达式3。//先判断表达式1是否成立，若成立取表达式2，否则取表达式3。
		
	[4] sizeof 运算符
		符号及含义：sizeof()（计算括号内数据类型或表达式的大小）
		数目：无
		结合性：无
		优先级：2级
		使用方法：sizeof(表达式) 或 sizeof(类型名)
		sizeof()用于计算某类型或某表达式所占内存的大小，经常与结构体/数组等连同使用
		
		eg: 
			int a = 5;
			sizeof(a+=100);		//编译阶段完成长度计算
			printf("a = %d\n", a);
			
	[5] 逗号运算符 
		符号及含义：,（将多个表达式连接起来组成一个新的表达式，并将最后一个表达式的值作为整个逗号表达式的值）
		数目：未知
		结合性：自左至右
		优先级：15级（最低）
		使用方法：表达式1,表达式2,…,表达式n
		
	[6] 位运算符 
		(1) 按位与( x & y )		如果两个操作数的相应位均为 1, 则该位的结果值为 1,否则为 0
			任何数与1相与	结果为本身 , 一般用于取某些位的值
			任何数与0相与	结果为0 ,一般用于清空某些位
		
		(2) 按位或( x | y )		如果两个操作数的相应位有一个为 1, 则该位的结果值为 1, 对应为都为0时结果才为0
			任何数与1相或	结果为1	,一般用于将某些位置 1
			任何数与0相或	结果为本身
		
		(3) 按位取反( ~x )		将操作数按位取反（0 到 1 和 1 到 0）
			
		(4) 按位异或( x^y )		如果参加运算的两个操作数的相应位同号，则结果为 0，异号则为 1
			1) 任何一个数和它本身异或，结果为0
			2) 任何一个数和0异或,结果为本身 
			3) 任何一个数所有二进制位和1异或,相当于取反
			
		(5) 左移( x<<y )		将操作数的所有二进制位左移若干位,左端（高位）移出部分舍弃，右端（低位）补0
		(6) 右移( x>>y )		将操作数的所有二进制位右移若干位，右端（低位）移出部分舍弃，左端（高位）根据符号位
																				补0或者1，无符号或正数补0，负数补1
								逻辑右移 lsr	高位补0  
								算术右移 asr	高位会根据符号位补位

	[7] 赋值运算及其复合运算 
		符号及含义：=（赋值） +=（加后赋值） -=（减后赋值） *=（乘后赋值） /=（除后赋值） %=（取余后赋值）
			<<=（左移后赋值） >>=（右移后赋值） &=（按位与后赋值） ^=（按位异或后赋值） |=（按位或后赋值）
		
		数目：双目运算符（一次赋值）
		结合性：自右至左
		优先级：14级
		使用方法：
			一次赋值：待赋值 运算符 表达式。如a=3，a=5+4，a+=5 // a = a + 5;
														  a^=5 // a = a ^ 5;
			多重赋值：将同一个值赋给多个变量的操作，如a=b=c=10。此时a，b，c都为10	
			
	作业: 
		【作业1】 设int a=3,b=4,c=5,d;
					分别求出下列表达式的d的值（即判断此表达式真假）先猜想结果，再上机验证
					1）d = ((a+b)>c) && (b==c)			//d = 0
					2）d = a || ((b+c) && (b-c))		//d = 1
					3）d = ((!(a>b)) && (!c)) || 1		//d = 1
					4）d = (!(x=a))&&(y=b)&&0（x和y均为int型，求出x和y的值）//d = 0, x = 3, y = ? 
					5）d = ((!(a+b))+c-1) && (b+c/2).			//d = 1
		【作业2】：将无符号整型变量num的第[k+4:k]位（二进制表示中）清零.（k从0开始计数）；
					num & (~(0x1F << k))
		【作业3】：将无符号整型变量num的第[k+7:k]位（二进制表示中）设为0x66.（k从0开始计数）；
					num & (~(0xFF << k)) | (0x66 << k)
		【作业4】：取32bit无符号整数a=0x12345678 的高16bit和低16bit，分别保存在两个16bit无符号整数并显示出来
				#define	LWORD(x)	(unsigned short)((x) & 0xFFFF)
				#define	HWORD(x)	(unsigned short)((x) >> 16)
===================================================================================================================			
2. C 语言程序结构
	[1] C语言程序有3种基本结构：顺序结构、选择结构和循环结构。
		①谓顺序结构：就是指按照语句在程序中的先后次序一条一条的顺次执行，
			且每个语句都会被执行到。先执行A模块，再执行B模块。	
		②选择结构：选择语句又称为分支语句，它通过对给定的条件进行判断，从而决定执行两个
			或多个分支中的哪一支。 当条件P的值为真时执行A模块，否则执行B模块。
		③循环结构：是在某些条件的控制下重复执行一段代码语句，让程序“杀个回马枪”，当满足循环
			条件时执行循环语句，否则不执行循环语句。
			
	[2] 分支结构  
		(1) 条件表达式  ?:
		(2) if-else 
			1) 单分支结构	
				if (条件表达式) {
					语句;
					...
				}
				说明: 先计算条件表达式判断的条件，如果条件为真则执行跟在后面的是一个或一组语句，
						如果条件为假则跳过不执行。
				注意:
					如果只有一个语句，大括号{}可以省略，但不建议。
					在if后的语句不止一个，应用大括号{}将他们组织起来。		
			
			2) 双重分支结构
				if (条件表达式) {
					语句-1;
					...
				} else {
					语句-2;
					...
				}
				说明: 说明: 先计算条件表达式判断的条件，如果条件为真则执行语句-1 及其后续语句，
						如果条件为假那么控制权将交给else ，执行语句-2 及其后续语句
						
			3) 多重分支结构
				if (条件表达式-1) {
					语句-1;
					...
				} else if (条件表达式-2){
					语句-2;
					...
				} else if (条件表达式-3){
					语句-3;
					...
				} else {
					语句-4;
					...
				}	
				说明：首先判断条件1是否为真，若为真，则执行语句1并跳出，若为假则继续判断条件2是否为真，
					若条件2为真则执行语句2并跳出，否则继续判断条件3。以此类推。如果所有条件都不为真，则执行else后的语句。
				注意: 在此处的结构中 else 也可以省略
			
			4) if语句嵌套使用
				if (条件表达式1) {
					if (条件表达式2) {
						语句-1
						...
					} else {
						语句-2
						...
					}
				} else {
					if (条件表达式3) {
						语句-3
						...
					} else {
						语句-4
						...
					}		
				}
				需要注意的是if和else的配对问题，一个匹配原则：在嵌套if语句中,else总与它上面最近的if配对
				示例: 
					#include <stdio.h>
					int main(int argc, const char *argv[])
					{
						int num;

						scanf("%d", &num);

						if (num > 0) {
							printf("%d is positive number\n", num);
						} else {
							if (0 == num) {
								printf("num is 0\n");
							} else {
								printf("num %d is negative number\n", num);
							}
						}				
						return 0;
					}
					gg = G 

			
				【作业1】:
					输入一个年份（正整数），判断这年是否是闰年
					闰年判断标准：年份能被4整除；如若遇到100的倍数，则需判断年份能否被400整除。（逢4一闰，逢百不闰，逢400又闰）
					如1900年是不是闰年，1904年是闰年，2000年是闰年
					
					#include <stdio.h>

					int main(int argc, const char *argv[])
					{	
						int year; 
						printf("请输入年份 : ");
						scanf("%d", &year);

						if ((year % 4 == 0) && (year % 100 !=0)) {
							printf("%d 是闰年\n", year);
						} else if (year % 400 == 0) {
							printf("%d 是闰年\n", year);
						} else {
							printf("%d 不是闰年\n", year);
						}
						
						return 0;
					}
					
					#include <stdio.h>
					int main(int argc, const char *argv[])
					{
						int year; 
						printf("请输入年份 : ");
						scanf("%d", &year);

						if (year % 4 == 0) {
							if (year % 100 != 0) {
								printf("%d 是闰年\n", year);	
							} else if (year % 400 == 0) {
								printf("%d 是闰年\n", year);	
							} else {
								printf("%d 不是闰年\n", year);
							}
						} else {
							printf("%d 不是闰年\n", year);
						}

						return 0;
					}
				【练习1】
					提示用户输入输血者的性别和体重，根据性别和体重计算出输血量；(同实验手册 第7讲 练习一)
				如果是男性且体重大于140的输血量为200毫升；
				如果是男性且体重小于等于140的输血量为180毫升；
				如果是女性且体重大于100斤输血量为150毫升，否则为120毫升；
				
				#include <stdio.h>

				int main(int argc, const char *argv[])
				{
					char gender;
					int weight, blood;

					printf("please input gender & weight \n");
					if (scanf ("%c%d", &gender, &weight) != 2) {
						printf("input error\n");
						return -1;
					}

					if ('f' == gender || 'F' == gender) {
						if (weight > 100) {
							blood = 150;
						} else {
							blood = 120;
						}
					} else if ('m' == gender || 'M' == gender) {
						if (weight > 140) {
							blood = 200;
						} else {
							blood = 180;
						}
					} else {
						printf("gender is error\n");
						return -1;
					}

					printf("blood = %d\n", blood);
					
					return 0;
				}

			【练习2】
			需求定义：
				个人所得税计算器，编写程序实现个人所得税的计算，要求从控制台输入本月实际收入，求出本月应纳个税。
			个人所得税计算公式：
				月实际收入－个税起征点（2000.00）。
				月应纳个人所得税税额 = K1×F1+K2×F2+K3×F3+…+Kn×Fn。
				其中Kn表示月应纳税所得额在第n级的部分，Fn表示第n级的税率。
			个人所得税率表：
				级数	全月应纳税所得额					税率（%）
				 1		不超过500元的							5
				２		超过500元至2,000元的部分				10
				３		超过2,000元至5,000元的部分				15
				４		超过5,000元至20,000元的部分				20
				５		超过20,000元至40,000元的部分			25
				６		超过40,000元至60,000元的部分			30
				７		超过60,000元至80,000元的部分			35
				８		超过80,000元至100,000元的部分			40
				９		超过100,000元的部分						45
				
			
				#include <stdio.h>

				#define BASIC 2000

				int main(int argc, const char *argv[])
				{
					float money, tax;

					printf("请输入您的收入 : ");
					scanf("%f", &money);

					money -= BASIC;

					if (money <= 0) {
						tax = 0.0;
					} else if (money > 0 && money <= 500) {
						tax = money*0.05;
					} else if (money > 500 && money <= 2000) {
						tax = 500*0.05+(money-500)*0.1; 
					} else if (money > 2000 && money <= 5000) {
						tax = 500*0.05+1500*0.1+(money-2000)*0.15; 
					} else if (money > 5000 && money <= 20000) {
						tax = 500*0.05+1500*0.1+3000*0.15+(money-5000)*0.2; 
					} else if (money > 20000 && money <= 40000) {
						tax = 500*0.05+1500*0.1+3000*0.15+15000*0.2+(money-20000)*0.25; 
					} else if (money > 40000 && money <= 60000) {
						tax = 500*0.05+1500*0.1+3000*0.15+15000*0.2+20000*0.25+(money-40000)*0.3; 
					} else if (money > 60000 && money <= 80000) {
						tax = 500*0.05+1500*0.1+3000*0.15+15000*0.2+20000*0.25+20000*0.3+(money-60000)*0.35; 
					} else if (money > 80000 && money <= 100000) {
						tax = 500*0.05+1500*0.1+3000*0.15+15000*0.2+20000*0.25+20000*0.3+20000*0.35+(money-80000)*0.4; 
					} else if (money > 100000) {
						tax = 500*0.05+1500*0.1+3000*0.15+15000*0.2+20000*0.25+20000*0.3+20000*0.35+20000*0.4+(money-100000)*0.45; 
					}

					printf("您应缴纳的个人所得税 : %f\n", tax);
					
					return 0;
				}
				

			【练习3】
			需求定义：
					编写程序，实现控制台的猜数字游戏。游戏运行时产生一个0－10之间的随机整数，要求用户从控制台输入数字，
				若输入的数字比产生的数字小，则输出：“太小了，再大一点！”；若输入的数字比产生的数字大，则输出：
				“太大了，再小一点！”，若输入的数字和产生的数字相等，则输出：“恭喜你猜对了！”然后退出程序；
				若用户猜了3次还未猜对，则输出：“你太笨了，下次再来吧！”然后退出程序。
				
			#include <stdlib.h>
			int rand(void);		//void 表示函数没有参数 
			函数功能: 
				产生随机数
			函数返回值: 
				return a value between 0 and RAND_MAX (inclusive)
				
				RAND_MAX = 2147483647
				
			#include <stdlib.h>	
			void srand(unsigned int seed);	// seed 种子
			函数功能: 
				设置随机数的种子
											//void 表示函数没有返回值 
											
			#include <time.h>

			time_t time(time_t *t);		//t = NULL
			函数功能: 
				获取系统时间;
			函数返回值: 
				成功 返回 系统时间(秒)
				失败 返回 -1
				
			示例:  
				#include <stdio.h>
				#include <stdlib.h>
				#include <time.h>

				int main(int argc, const char *argv[])
				{
					int num;

					srand(time(NULL)); //根据系统时间设置随机数的种子

					num = rand(); //获取随机数

					printf("RAND_MAX = %d\n", RAND_MAX);
					printf("num = %d\n", num);
					
					return 0;
				}
				
				int main(int argc, const char *argv[])
				{
					int m, n;

					srand(time(NULL));
					m = rand();

					m = m % 10;

					printf("请输入一个 0-10 之间的数 : ");
					scanf("%d", &n);
					if (m == n) {
						printf("恭喜你猜对了!\n");
						return 0;
					} else if (n > m) {
						printf("太大了，再小一点!\n");
					} else if (n < m) {
						printf("太小了，再大一点!\n");
					}
				}

	(3) switch 结构  
			switch是多分支选择语句。通过switch()的多分支判断可以简便地实现多分支选择结构
		switch()语句的一般形式如下：
			switch (表达式) {
				case 常量表达式1: 
					语句1;
					...
					break; 
				case 常量表达式2: 
					语句2;
					...
					break;
				case 常量表达式3: 
					语句3;
					...
					break;
				......
				default:
					语句n; 
					...
			}
			说明:  
				1) switch(表达式)表达式的值应是一个整数（包括字符数据）
				2) switch()下的{}是一段语句块，这段语句包含若干个以case开头的语句块和至多一个以default开头的语句块
				3) case 后需要一个整型或字符型常量（或常量表达式）。首先判断switch(表达式)的表达式的值，之后与各个
						case之后的值进行比对，如果某个case后的值与表达式的值相同，则跳转到此case语句；
						如果所有的case都不匹配，则跳转到default后的语句。
				4) 可以没有default语句。若没有default语句，则如果没有匹配的case，则程序不执行任何语句
				5) 每个case语句后的常量值必须各不相同，否则会发生互相矛盾现象	
				6) 注意：break语句用来终止switch()语句。如果case语句后没有break语句，则当匹配到合适的case后，
					程序会一直执行接下来的语句直至遇到break或switch()结束

			练习: 将学生成绩问题改用switch()语句来实现
				程序输入成绩，为0~100之间的整数。之后输出成绩代表的分数段：
				90~100为优，80~89为良，70~79为中，60~69为及格，0~59为不及格，其他则输出错误信息
				
			#include <stdio.h>

			int main(int argc, const char *argv[])
			{
				int score;

				printf("please input your score : ");
				scanf("%d", &score);

				switch (score/10) {
				case 10:
				case 9:
					printf("成绩为优秀\n");break;
				case 8:
					printf("成绩为良好\n");break;
				case 7:
					printf("成绩为中等\n");break;
				case 6:
					printf("成绩为及格\n");break;
				case 5:
				case 4:
				case 3:
				case 2:
				case 1:
				case 0:
					printf("成绩为不及格\n");break;
				default:
					printf("数据有误\n");
				}
				
				return 0;
			}

			示例：GNU C支持case x … y这样语法，区间[x,y]中的数都会满足这个case的条件
			
			#include <stdio.h>

			int main(int argc, const char *argv[])
			{
				int score;

				printf("please input your score : ");
				scanf("%d", &score);

				switch (score/10) {
				case 9 ... 10:
					printf("成绩为优秀\n");break;
				case 8:
					printf("成绩为良好\n");break;
				case 7:
					printf("成绩为中等\n");break;
				case 6:
					printf("成绩为及格\n");break;
				case 0 ... 5:
					printf("成绩为不及格\n");break;
				default:
					printf("数据有误\n");
				}
				
				return 0;
			}

			【练习1】
				输入一个字符，判别它是否大还是小写字母，
					如果是大写字母，将它转换成小写字母；
					如果是小写字母，将它转换成大写字母；	
					其他字符，不转换。然后输出最后得到的字符。使用switch结构
					
					#include <stdio.h>

					int main(int argc, const char *argv[])
					{
						char ch;

						printf("please input a charcater : ");
						scanf("%c", &ch);

						switch (ch) {
						case 'a' ... 'z': 
							ch -= ('a' - 'A');break;
						case 'A' ... 'Z':
							ch += ('a' - 'A');break;
						}

						printf("%c\n", ch);

						
						return 0;
					}


			【练习2】运输公司对用户按路程计算费用。路程越远，每吨*千米运费折扣越高。计算运费公式如下：
				freight = weight * distance * price * (1-discount);
			路程与折扣的关系如下：
				s<250：无折扣
				250<=s<500:2%折扣
				500<=s<1000:5%折扣
				1000<=s<2000：8%折扣
				2000<=s<3000：10%折扣
				3000<=s：15%折扣
			要求从键盘输入货运总重（单位吨）、货运路程（单位千米）、每吨*千米货运单价（单位元），输出总花费。使用switch结构。
			
			#include <stdio.h>

			int main(int argc, const char *argv[])
			{
				float freight, weight, price, discount;
				int distance;
				int tmp;

				printf("请输入货物的重量，货物的单价，运输距离\n");
				scanf("%f%f%d", &weight, &price, &distance);

				if (distance >= 3000) 
					tmp = 12;
				else 
					tmp = distance / 250;

				switch (tmp) {
				case 0:
					discount = 0.0;break;
				case 1:
					discount = 0.02;break;
				case 2 ... 3:
					discount = 0.05;break;
				case 4 ... 7:
					discount = 0.08;break;
				case 8 ... 11:
					discount = 0.1;break;
				case 12:
					discount = 0.15;break;
				default: 
					printf("error data\n");
				}

				freight = weight * distance * price * (1 - discount);
				printf("freight = %f\n", freight);
				
				return 0;
			}

			

				
			
			
				
			
				
				
	
				



		
	
	
	
	
	
	
	
	
		

