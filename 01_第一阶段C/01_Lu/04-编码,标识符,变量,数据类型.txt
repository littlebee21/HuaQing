1.复习
	[1] vim 编辑器 底行模式其他用法
		(1) 设置vim编辑器选中
			set mouse=   开启鼠标选中 
			set mouse=a  取消
		(2) 设置行号 
			set nu		显示行号 
			set nonu	取消显示  
		(3) 读取文件内容  
			r path/file
		(4) 分屏显示  
			vsp  path/file
			sp 	path/file
		(5) 跳转到指定行 
			n 
		
	[2] 编程语言基础 
		(1) 什么是程序(program):为了解决特定问题或实现特定目标，使用计算机编程语言编写的指令集合
		(2) 什么是编程语言: 可以控制计算机为我们做事情，的语言即编程语言。
		(3) 编程语言的发展史 : 机器语言 -> 汇编语言 -> 高级语言 -> 自然语言 
		(4) 高级编程语言的分类  
			1) 程序运行的特点 
				编译型语言 
				解释型语言
			2) 编程语言的发展顺序和属性
				面向过程  
				面向对象
		(5) C语言 
			面型过程的编译型语言
	
	[3] 编译器 Compiler
		(1)将代码转换成计算机可以识别的二进制机器指令
		(2)GCC编译器  => GNU C Compiler
		(3)GCC编译器的基本用法 
			gcc [-options] [files]
			eg: 
				gcc **.c **.c -o filename	//若不指定文件命，默认文件名为a.out
				./filename 					//运行程序
		(4)GCC编译流程  
			预处理 -> 编译 -> 汇编 -> 链接
	
	[4] C语言的注释与编码规范 
		(1) 注释  
			行注释		//行注释
			块注释		/*块注释*/
		(2) 编码规范
			Linux Kernel	Codingstyle	
	[5] 编程基础知识
		(1) 计算机的数制 ：二进制 
		(2) 计算机中常用单位  
			1bit
			8bit = 1 byte
			1024byte = 1Kb 
			1024Kb = 1Mb 
			1024Mb = 1Gb 
			1024Gb = 1Tb 
			1024Tb = 1Pb 
			1024Pb = 1Eb 
			...
		(3) 进位制(进位计数制)
			凡是按进位的方式计数的数制叫做进位计数制，简称进位制或进制。
			二进制、十进制、八进制、十六进制
			
			进行加法运算时逢 X 进一（满 X 进一），进行减法运算时借一当 X，这就是 X 进制
		(4) 将二进制、八进制、十六进制转换为十进制	
			按权相加
			1) 整数部分	位权=N^(i-1) 
			2) 小数部分	位权=N^(-j) 
				1101.11  = 1*2^3 +2 1*2^2 + 0*2^1 + 1*2^0 +  * 2^-1 + 1*2^-2 ...
	
		(5) 将十进制转换为二进制、八进制、十六进制
			1) 整数部分 ： 除 N 取余，逆序排列
			2) 小数部分 ： 乘 N 取整，顺序排列
			
		(6) 二进制与八进制之间转换  
				二进制整数转换为八进制整数时，每三位二进制数字转换为一位八进制数字，运算的顺序是从低位向高位依次进行，
			高位不足三位用零补齐。
			
				八进制整数转换为二进制整数时，思路是相反的，每一位八进制数字转换为三位二进制数字，运算的
			顺序也是从低位向高位依次进行。
		
		(7) 二进制与十六进制之间转换  
				二进制整数转换为十六进制整数时，每四位二进制数字转换为一位十六进制数字，运算的顺序是从
			低位向高位依次进行，高位不足四位用零补齐。
				
				十六进制整数转换为二进制整数时，思路是相反的，每一位十六进制数字转换为四位二进制数字，运算的顺
			序也是从低位向高位依次进行
			
	[6]作业
		(1) 将以下数转换成10进制 
			二进制：1001		=>	9
			二进制：101.1001    =>  5.5625
			八进制：302			=>	2+64*3=194
			八进制：302.46		=>  194.59375
			十六进制：EA7 		=>	14*16^2 + 10*16 + 7 = 3751
		(2) 进制转化
				0x4cfd81 转化为八进制
					010 011 001 111 110 110 000 001
					23176601
				0x4003f  转化为二进制
					0100 0000 0000 0011 1111
				061345   转化为二进制
					110 001 011 100 101
				37.125    转化为二进制
					100101.001
						0.125 * 2 = 0.25
						0.25  * 2 = 0.5
						0.5	  * 2 = 1.0
	
=========================================================================================================	
1.整数在计算机内的编码方式
	[1] 无符号数和有符号数的区别
		无符号数（unsigned）由于不带符号，表示时比较简单，可以直接用它对应的二进制形式表示。
		
		有符号数（signed）带无符号数（unsigned）有正负号。数学上用正负号来表示数的正负。由于计算机
	只能识别二进制符号，不能识别正负号，因此计算机中只能将正、负号数字化，用二进制数字表示。通常，
	在计算机中表示有符号数时，在数的前面加一位，作为符号位。正数表示0，负数表示为1，其余位表示数的大小。
	
	[2] 原码
		原码表示时，最高位为符号位，正数用0表示，负数用1表示，其余的位用于表示数的绝对值。
	对于一个N位的二进制，它的原码表示范围为-(2n-1-1)~+(2n-1-1)。例如：如果用8位二进制表示原码，
	则数的范围为-127~+127
		【例1】 求+67、-25的原码（机器字长8位）。
			因为
				|+67|=67=1000011B
				|-25|=25=0011001B
			所以
				[+67]原=01000011B
				[-25]原=10011001B
	
	[3] 反码
		反码表示时，最高位为符号位，正数用0表示，负数用1表示，正数的反码与原码相同，而负数的反码可
	在原码的基础之上，符号位不变，其余位取反得到。
		【例2】 求+67、-25的反码（机器字长8位）。
			因为
				[+67]原=01000011B
				[-25]原=10011001B
			所以
				[+67]反=01000011B
				[-25]反=11100110B
				
	[4] 补码
		补码表示时，最高位为符号位，正数用0表示，负数用1表示，正数的补码与原码相同，而负数的补码
	可在原码的基础之上，符号位不变，其余位取反，末位加1得到。
		【例3】 求+67、-25的补码（机器字长8位）。
			因为
				[+67]原=01000011B
				[-25]原=10011001B
			所以
				[+67]补=01000011B
				[-25]补=11100111B

	求补运算：一个二进制数，符号位和数值位一起取反，末位加1。
		【例4】 已知+25的补码为00011001B，用求补运算求-25的补码。
		+25补	00011001
		-25补	11100111
		+25补	00011001
	
	练习：求以下数字的原码、反码、补码。（可以使用计算器）计算机字长为16bit
		1、15（10进制）
			原码、反码、补码 = 0000 0000 0000 1111
		2、0xE3A4（16进制）	
			原码 : 1110 0011 1010 0100
			反码 : 1001 1100 0101 1011
			补码 : 1001 1100 0101 1100
			
	[4] 计算机使用补码存储有符号整数
		1) 缘起性空
			1 + (-1) = 0 
			1 原码、反码、补码 :  0000 0001 
			-1 原码： 1000 0001 
			   反码:  1111 1110 
			   补码:  1111 1111
			   1111 1111 
			   0000 0001 
			   ---------
			   0000 0000 
		2) 0 
			1) 原码方式  
				0000 0000 
				1000 0000 
			2) 反码方式  
				0000 0000 
				1111 1111 
			3) 补码方式  
				0000 0000 
				0000 0000 
			
=========================================================================================================	
1. 标识符与关键字
	[1] C语言的字符集
		C语言的基本符号可以分为4类
			1)英文字母：大小写26个，共52个；
			2)阿拉伯数字：0-9共10个数字；
			3)下划线与分号：
			4)特殊符号：
				运算符：
					算术运算符：+、-、*、\、%、++、--
					关系运算符：<、>、>=、<=、==、!=
					逻辑运算符：&&、|| 、！
					位运算符：&   |    ~  ^  >>    <<
					条件运算符：? :
				分隔符:
					()   []  {}  .  ,  ;
	[2] 标识符  
		1) 标识符：用于标识变量名、符号常量名、函数名、类型名、文件名等的有效字符序列；
		2) 标识符的命名规则
			①　	标识符只能由字母、数字和下划线三种字符组成，且第一个字符必须为字母或下划线；
			②　	C 语言中的标识符大小写敏感(区分大小)；
			③　	用户自定义的标识符不能与关键字同名；
		练习：下列哪些标识符是合法的？哪些是不合法的？不合法的标识符错误在哪？
			Arena、 1sttest、 arena  s_count、marks40、oh!god、 class_one、start... end、int
		合法的:
			Arena、arena、s_count、marks40、class_one
		不合法的:	
			1sttest、oh!god、start... end、int
			
	[3] 关键字  
		关键字：对编译器具有特定含义的标识符，是标识符的一个特殊的集合。C语言内所有的关键字都是小写。
		【1】基本数据类型
			void：声明函数无返回值或无参数，声明无类型指针，显示丢弃运算结果。（C89标准新增）
			char：字符型类型数据，属于整型数据的一种。（K&R时期引入）
			int：整型数据，表示范围通常为编译器指定的内存字节长。（K&R时期引入）
			float：单精度浮点型数据，属于浮点数据的一种。（K&R时期引入）
			double：双精度浮点型数据，属于浮点数据的一种。（K&R时期引入）
			//_Bool:布尔型（C99标准新增）
			//_Complex:复数的基本类型（C99标准新增）
			//_Imaginary:虚数，与复数基本类型相似，没有实部的纯虚数（C99标准新增）
			//_Generic:提供重载的接口入口（C11标准新增）
		【2】类型修饰关键字
			short：修饰int，短整型数据，可省略被修饰的int。（K&R时期引入）
			long：修饰int，长整型数据，可省略被修饰的int。（K&R时期引入）
			//long long：修饰int，超长整型数据，可省略被修饰的int。（C99标准新增）
			signed：修饰整型数据，有符号数据类型。（C89标准新增）
			unsigned：修饰整型数据，无符号数据类型。（K&R时期引入）
			//restrict:用于限定和约束指针，并表明指针是访问一个数据对象的唯一且初始的方式。（C99标准新增）
		【3】复杂类型关键字
			struct：结构体声明。（K&R时期引入）
			union：联合体声明。（K&R时期引入）
			enum：枚举声明。（C89标准新增）
			typedef：声明类型别名。（K&R时期引入）
			sizeof：得到特定类型或特定类型变量的大小。（K&R时期引入）
			//inline:内联函数用于取代宏定义，会在任何调用它的地方展开。（C99标准新增）
		【4】存储级别关键字
			auto：指定为自动变量，由编译器自动分配及释放。通常在栈上分配。与static相反。当变量未指定时默认为auto。（K&R时期引入）
			static：指定为静态变量，分配在静态变量区，修饰函数时，指定函数作用域为文件内部。（K&R时期引入）
			register：指定为寄存器变量，建议编译器将变量存储到寄存器中使用，也可以修饰函数形参，建议编译器通过寄存器而不是堆栈传递参数。（K&R时期引入）
			extern：指定对应变量为外部变量，即标示变量或者函数的定义在别的文件中，提示编译器遇到此变量和函数时在其他模块中寻找其定义。（K&R时期引入）
			const：指定变量不可被当前线程改变（但有可能被系统或其他线程改变）。（C89标准新增）
			volatile：指定变量的值有可能会被系统或其他线程改变，强制编译器每次从内存中取得该变量的值，阻止编译器把该变量优化成寄存器变量。（C89标准新增）
		【5】流程控制关键字
			1）跳转结构
				return：用在函数体中，返回特定值（如果是void类型，则不返回函数值）。（K&R时期引入）
				continue：结束当前循环，开始下一轮循环。（K&R时期引入）
				break：跳出当前循环或switch结构。（K&R时期引入）
				goto：无条件跳转语句。（K&R时期引入）
			2）分支结构
			if：条件语句，后面不需要放分号。（K&R时期引入）
			else：条件语句否定分支（必须与if连用）。（K&R时期引入）
			switch：开关语句（多重分支语句）。（K&R时期引入）
			case：开关语句中的分支标记，与switch连用。（K&R时期引入）
			default：开关语句中的“其他”分支，可选。（K&R时期引入）
			for：循环（K&R时期引入）
			while：循环（K&R时期引入）

2. 变量 
	[1] 什么是变量
		所谓变量是指在程序运行过程中其值可以改变的量。
		使用变量时必须“先定义，后使用”。
	
	[2] 定义变量  
		语法格式：
			数据类型 变量名称;		//int 
			eg: 
				int num;
		注意： 指定变量名是要符合C语言标识命名规则，建议"见名知意"。
		
	[3] 变量的初始化&赋值
		在C语言中，未初始化的局部变量为乱码，因此使用之前需要事先给值。
		(1) 定义时初始化变量：	
			int num = 12;		// = 	赋值符
								// ==	判等运算符
		(2) 定义后初始化变量：
			int num;
			num = 12;			//赋值操作
		(3) 变量的实质
			一个变量实质上代表了内存中某个存储单元。在程序中，变量a就是指用a命名的某个存储单元，
		用户对变量a进行操作就是对该存储单元进行操作；给变量a赋值，实质上就是把数据存如该变量所
		代表的存储单元中。
		(4) 变量的地址 
			地址: 计算机内存(主存)中，每一个字节的空间都有一个编号，这个编号我们称为地址。
			变量的地址：变量在内存中总占用几个连续的字节，开始字节的地址，就是变量的地址。
			
			获取变量的地址 ： &		//取地址符 
							  &variable	//取变量的地址


3. 常量
	[1]什么是常量
		在程序执行过程中，其值不被改变的量。常量主要分为两类：
		(1) 直接常量：直接引用的数字等；
			字符常量	'A' , 'a'
			整型常量	10 100 0b1101  0664 0xaf
			实型常量	3.14 5.69
			字符串常量 	"hello world"	"100"
		(2) 符号常量：使用标识符来代替一个数字或字符...（常见的：宏定义常量 和 常变量）
	
	[2] 宏定义
		(1) 什么事宏定义
			#define 也是C语言预处理命令的一种，被称为宏定义指令。
			所谓宏定义，就是用一个标识符来表示一个字符串，如果在后面的代码中出现了该标识符，
			那么就全部替换成指定的字符串。
		(2) 基本语法格式
			每行#define都由3部分组成。
			
			#define   宏 	替换体
				1) #define  宏定义指令   
				2) 是选定的缩写，也称为宏。有些宏代表值，这些宏被称为类对象宏(object-like macro)；
											C语言还有类函数宏(function-like macro)，稍后讨论。
											宏的名字中不允许有空格，而且必须遵循C变量的命名规则。
				3) 替换体 称为替换列表或替换体。一旦预处理器在程序中找到宏的实例后，就会用替换体代替该宏
								（也有例外）。从宏变成最终替换文本的过程称为宏展开(macro expansion)。
		(3) 类对象宏 (object-like macro 不带参宏) 
			#define 宏名 宏值
			例如：
				#define MAX 10
				#define PI 3.1415926

		(4) 类函数宏 (unction-like macro 带参数宏) 
			#define 宏名(参数列表) 宏值
			例如：
				#define S(r) PI*r*r
				
				S(5) => PI * 5 *5

		实例1：使用宏定义PI来定义3.1415926，计算圆的面积
			#include <stdio.h>

			#define PI 3.1415926		//类对象宏
			#define S(r) PI*r*r			//类函数宏

			int main(int argc, const char *argv[])
			{
				int x = 0;
				printf("请输入圆的半径 : ");
				scanf("%d", &x);

				printf("圆的面积 = %f\n", S(x));
				
				return 0;
			}
		
		练习：租船问题。
			写程序计算游客需要付的租船的费用。租船每小时30元，押金100元。
			游客输入租船时间，计算出租船费用。
			租船费用=时间*每小时钱数+押金。要求押金与每小时钱数使用宏定义
		
			#include <stdio.h>

			#define YAJING 100
			#define PERHOUR 30
			#define Money(t) t*PERHOUR+YAJING

			int main(int argc, const char *argv[])
			{
				int hour = 0;
				printf("please input times : \n");
				scanf("%d", &hour);

				printf("Money = %d\n", Money(hour));
				
				return 0;
			}
		
		实例2：
		#include <stdio.h>

		#define Fun1(a, b) a * b
		#define Fun2(a, b) (a) * (b)

		int main(int argc, const char *argv[])
		{
			int a = 2; 
			int b = 3;

			printf("%d\n", Fun1(a+b, b+a));
			printf("%d\n", Fun2(a+b, b+a));
			
			return 0;
		}
			
		注意：使用足够多的圆括号来确保运算和结合的正确顺序		
	
	[3] 常变量 (只读变量)
		常变量：变量值不可改变的量，使用const修饰
			const int a = 10;//定义一个常变量

		const修饰后的变量会变成只读，因此无法再次赋值。因此初始化常变量需要在定义时直接赋值。
		
	作业：将求圆面积的例子和租船改成const
		

4. C语言格式化输入输出函数  
	(1) printf 
		#include <stdio.h>

		int printf(const char *format, ...);
		函数的功能： 
			按指定格式向标准输出(终端)输出数据
		函数的参数：
			1) format ：格式控制字符串, 用于指定输出数据的格式,包含两种信息
				普通字符：原样输出
				格式说明：%[修饰符]格式字符，用于指定输出格式(显示是，格式说明符会被替换成可变参数中的值)
					%d  整型数据 
					%c 	字符型数据 
					%f 	浮点型数据 
					...
			2) 可变参数(不定参数:参数的个数、参数的类型都不确定、如果有多个可变参数需要用','隔开)
				
			
			printf("hello world\n");
			int a = 10; 
			int b = 5; 
			printf("a=%d,b=%d\n", a, b);
		
	(2) scanf
		#include <stdio.h>

		int scanf(const char *format, ...);
		函数功能： 
			按指定的格式从标准输入stdin获取数据，并将数据存入地址表指定的存储单元中
		函数参数： 
			1) format : 格式控制字符串,用于指定数据输入的格式
				普通字符：原样输入
				格式说明：%[修饰符]格式字符，用于指定输入格式
					%d  整型数据 
					%c 	字符型数据 
					%f 	浮点型数据 
					...
			2) 可变参数: 输入变量的地址表（多个时以“,”分隔）
			
		int a, b;
		scanf ("a=%d,b=%d", &a, &b);
		scanf ("%d%d", &a, &b);	//默认的分隔符  空格"space", 制表符"Tab", 回车"Enter"
		
		eg: 
			#include <stdio.h>

			int main(int argc, const char *argv[])
			{
				int a, b; 

				printf("please input two number :\n");
				scanf("%d%d", &a, &b);

				printf("a = %d, b = %d\n", a, b); 
				return 0;
			}
		练习： 交换杯子里的液体
			有两个杯子（用int型代替），其中一个装酒，其中一个装水。如何让两个杯子中的液体交换？
			最后打印结果
			//数字1 表示酒; 数字2 表示水.
			int a = 1; //装酒 
			int b = 2; //装水 
			
			1)中间变量: 
				tmp = a; 
				a = b; 
				b = a;
			2)加减法  
				a = a + b; 
				b = a - b; 
				a = a - b;
				
5.  C语言数据类型
	[1] 基本数据类型: 基本数据类型最主要的特点是，其值不可以再分解为其它类型。
		1)整型 			int  
		2)字符型 			char 
		3)浮点型(实型)	
				单精度 	float 
				双精度  double 
	
	[2] 构造数据类型： 是根据已定义的一个或多个数据类型用构造的方法来定义的。也就是说，
		一个构造类型的值可以分解成若干个“成员”或“元素”。
		1) 数组  	数据类型 数组名[]
		2) 结构体 	struct  
		3) 联合体/共用体 union  
		4) 枚举型	enum  
		
	[3] 指针型 ：指针是一种特殊的，同时又是具有重要作用的数据类型。其值用来表示某个量在内存储器中的地址。
		数据类型 *指针名;
		
	[4] 空类型：表示什么都不是，常用于函数返回值或者 。
		void 
		
6. 整型
	(1) 整型的类型 
		整型类型包括短整型(short int)、基本整型(int)、长整型(long int),
		1) 基本型：类型说明符为int：值必须是整数，可以是正的，负的或者是0；其取值范围依赖于计算机系统。
		2) 短整量：类型说明符为short int或short，用于仅需小数值的场合以节省空间。
		3) 长整型：类型说明符为long int或long，用于使用大数值的场合。
		有符号或无符号型：类型说明符为signed 或 unsigned。
		注意：如果不添加 signed 或 unsigned 说明符，变量类型默认为 signed
		1) 无符号基本型：类型说明符为 unsigned int或 unsigned。
		2) 无符号短整型：类型说明符为 unsigned short。
		3) 无符号长整型：类型说明符为 unsigned long。
	
	(2) 整型长度（32bit机）
		C 语言并没有严格规定 short、 int、 long 的长度，只做了宽泛的限制：
			1) short 至少占用 2 个字节。
			2) int 建议为一个机器字长。 32 位环境下机器字长为 4 字节， 64 位环境下机器字长为 8 字节。
			3) short 的长度不能大于 int， long 的长度不能小于 int。
		总结起来，它们的长度（所占字节数）关系为：
			2 ≤ short ≤ int ≤ long
			
		类型			占用内存字节数				数的范围
		int					4个字节					-2^31～2^31-1
		short				2个字节					-32768～32767
		long				4个字节					-2^31～2^31-1
		unsigned int		4个字节					0～（2^32-1）
		unsigned short		2个字节					0～65535
		unsigned long		4个字节					0～（2^32-1）
		
		整型长度（64 bit机）
		类型			占用内存字节数				数的范围
		int					4个字节					-2^31～2^31-1
		short				2个字节					-32768～32767
		long				8个字节					-2^63～2^63-1
		unsigned int		4个字节					0～（2^32-1）
		unsigned short		2个字节					0～65535
		unsigned long		4个字节					0～（2^64-1）

	(3) sizeof 运算符
		sizeof()运算符可以获取数据类型或变量的长度，单位字节。

		对于sizeof(),其形式类似于函数，但其本质是C语言的一个运算符，并且对 sizeof() 
	处理都是在编译阶段进行。
		
		语法格式: 	sizeof(变量/数据类型);
		
		#include <stdio.h>

		int main(int argc, const char *argv[])
		{
			printf("The size of int is %d\n", sizeof(int));		//4
			printf("The size of short is %d\n", sizeof(short));  //2
			printf("The size of long is %d\n", sizeof(long));	//4
			printf("The size of unsigned int is %d\n", sizeof(unsigned int));
			printf("The size of unsigned short is %d\n", sizeof(unsigned short));
			printf("The size of unsigned long is %d\n", sizeof(unsigned long));
			
			return 0;
		}
		
	(4) 整型常量的表示方法 
		在C语言中，整常数有二进制、八进制、十六进制和十进制四种。
		【1】十进制
			十进制整常数没有前缀。其数码为0～9，只要常数中不含小数点和指数的数编译器都会当作整数。
			合法的表达方式：237、-568、65535、1627；
			非法的表达方式：023 (不能有前导0)、23D (含有非十进制数码)。
		【2】八进制
			八进制整常数必须以0开头，即以0作为八进制数的前缀。数码取值为0～7。
			合法的表达方式：015(十进制为13)、0101(十进制为65)、0177777(十进制为65535)；
			非法的表达方式：256
		【3】十六进制：
			十六进制整常数的前缀为0X或0x。其数码取值为0~9，A~F或a~f。
			合法的表达方式：0X2A(十进制为42)、0XA0 (十进制为160)、0XFFFF (十进制为65535)
			非法的表达方式：5A (无前缀0X)、0X3H (含有非十六进制数码)。
		【4】二进制
			二进制由 0 和 1 两个数字组成，使用时必须以 0b 或 0B（不区分大小写）开头
			合法的表达方式：0b101(换算成十进制5)、0b110010（换算成十进制50）、0B100001（换算成）；
			非法的表达方式：101010（无前缀0B，相当于十进制）0B410（含有非二进制数码）。
			注意，标准的 C 语言并不支持上面的二进制写法，只是有些编译器自己进行了扩展，才支持二进制数字。
	
	(5) 整数的显示/打印方法
		1) 显示十进制整数
			%hd、 %d、 %ld 以十进制、有符号的形式输出 short、 int、 long 类型的整数
			%hu、 %u、 %lu 以十进制、无符号的形式输出 short、 int、 long 类型的整数
		2) 显示八进制整数
			%ho、 %o、 %lo 以八进制、不带前缀、无符号的形式输出 short、 int、 long 类型的整数
			%#ho、 %#o、 %#lo 以八进制、带前缀、无符号的形式输出 short、 int、 long 类型的整
		3) 显示十六进制整数
				以十六进制、不带前缀、无符号的形式输出 short、 int、 long 类型的整数。如果 x 小写，那
			么输出的十六进制数字也小写；如果 X 大写，那么输出的十六进制数字也大写。
			%hx、 %x、 %lx
			%hX、 %X、 %lX
				以十六进制、带前缀、无符号的形式输出 short、 int、 long 类型的整数。如果 x 小写，那么
			输出的十六进制数字和前缀都小写；如果 X 大写，那么输出的十六进制数字和前缀都大写。
			%#hx、 %#x、 %#lx
			%#hX、 %#X、 %#lX
		注意
		1）虽然部分编译器支持二进制数字的表示，但是却不能使用 printf 函数输出二进制，这一点比较遗憾。
		2）按八进制或者十六进制打印一个signed整数没有意义, 其结果会将signed数转化为unsigned数打印。
		3）显示值的类型要同说明符相匹配；当格式控制符和数据类型不匹配时，编译器会给出警告，提示程序员可能会存在风险。

	(6) 整数溢出
		整数溢出程序不会报错，所以写程序时一定要小心，当达到最大值时会重新从起点开始。
		
		
	作业: 
		1. 按照上课说的要求整理今天的笔记 
		2. 复习本周的学习内容 
		3. 预习后续课程
		4. 将求圆面积的例子和租船改成const




		
		
	
			
		
		
		
			

























		
		
		