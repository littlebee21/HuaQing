C++
    1> 服务器
    2> 游戏引擎
        unreal，cocos2dx
    3> 桌面软件
    4> 系统软件
    5> 嵌入式软件

使用领域：
    C++一般都使用在大型项目中
    1> 国家电网
    2> 操作系统
    3> 石油
    4> 天然气
    5> 航天
    6> 军工

C++是C语言的超集

GitHub
Gitee

Qt安装注意事项：
    安装目录不能有任何中文


C++兼容C语言

C++ 预处理器

C中实现类似C++中的bool类型的功能：
    1> 
        #define false  0
        #define true   1
        #define bool   int

    2> 
        typedef enum{
            false,
            true 
        }bool;

C++的知识点：
    1> bool类型
         在C++中提供了一种新的数据类型，bool类型，该类型是基本数据类型
         bool类型占 1 byte
         bool 类型一个有两个值
            1> true（非0） ---- 真
            2> fasle（0） ---- 假

C++的命名空间：
    1> namespace
    2> 作用：用来解决命名冲突


小李：
    bool b = false;

小韩：
    int b = 20;


“cout <<   ” 输出， 类似C语言中的printf
“cin >> ”   输入，类似C语言的scanf
“endl”        换行，类似C语言的"\0"

namespace xiaoLi {
    bool b = false;
}

namespace xiaoHan {
    int b = 100;
}

xiaoHan::b
xiaoLi::b 

using namespace xioaHan;

cout << b << endl;

C++的内联函数：
    C++语言新增关键字 inline，用于将一个函数声明为内联函数。在程序编译时，编译器会将内联函数调用处用函数体替换，这一点类似于C语言中的宏扩展。
采用内联函数可以有效避免函数调用的开销，程序执行效率更高。使用内联函数的缺点就是，如果被声明为内联函数的函数体非常大，则编译器编译后程序的
可执行码将会变得很大。另外，如果函数体内出现循环或者其它复杂的控制结构的时候，这个时候处理这些复杂控制结构所花费的时间远大于函数调用所花的时间，
因此如果将这类函数声明为内联函数，意义不大，反而会使得编译后可执行代码变长。
    通常在程序设计过程中，我们会将一些频繁被调用的短小且简单的函数声明为内联函数。 
    为了使得inline声明内联函数有效，我们必须将inline关键字与函数体放在一起才行，否则inline关键字是不能成功将函数声明内联函数的。
如例1所示，inline关键字则无丝毫作用，而例2中则成功将swap函数声明为了一个内联函数。


int a = 10;
int &ra = a;

cout << "a's address = " << &a << endl;
cout << "ra's address = " << &ra << endl;

int a = 20;
int &ra = a;    // √
int &ra;          // 注意：这里是错误的，因为引用在声明的时候必须要初始化
ra = a;

做个小练习：
    实现两个数交换：
        指针
        引用

// 这是典型的值传递，不能实现交换
void swap1(int x, int y){
    int nTemp = x;
    x = y;
    y = nTemp;
}

// 指针传递
void swap2(int *x, int *y){
    int nTemp = *x;
    *x = *y;
    *y = nTemp;
}

// 引用传递
void swap3(int &x, int &y){
    int nTemp = x;
    x = y;
    y = nTemp;
}

int main(){
    int a = 10, b= 20;
    cout << "a = " << a << "   " << "b = " << b << endl; 
    swap1(&a, &b);
    swap3(a, b);
    cout << "a = " << a << "   " << "b = " << b << endl; 

    return 0;
}

综上所述：引用最常用的场景是作为函数参数使用

引用
引用是别名，在声明时必须初始化，在实际代码中主要用作函数的形参（有一个地方例外:类中可以声明，在其他地方初始化）
（1）&在此不是求地址运算，而是起引用的标识作用。
（2）类型标识符是指目标变量的类型。
（3）声明引用时，必须同时对其进行初始化。
（4）引用声明完毕后，相当于目标变量名有两个名称，即该目标原名称和引用名，且不能再把该引用名作为其他变量名的别名。
      ra = 1; 等价于 a = 1;
（5）声明一个引用，不是新定义了一个变量，它只表示该引用名是目标变量名的一个别名，它本身不是一种数据类型，因此引用本身不占存储单元，
         系统也不给引用分配存储单元。所以对引用求地址，就是对目标变量求地址。&ra与&a相等。
（6）不能建立数组的引用。因为数组是一个由若干个元素所组成的集合，所以无法建立一个数组的别名。


C++ primer

问题：
    1> 引用作为函数的返回值    

    int  &func(int r){
        int result = r * r;
        return result;
    }

    int result；
    int &func(int r){    // 改进版本
        int result = r * r;
        return result;
    }

    int main(){
        int x = func(20);
        return 0;
    }


new/delete   和   new[]/delete[]  一般成对出现
malloc/free也是成对出现

如果不是成对出现会出现什么问题
    1> 如果没有释放，则内存泄露
    2> 如果重复释放，则程序也会崩溃

malloc/free和new/delete的区别：

面试的时候容易问到的问题
    malloc/free和new/delete的区别，能不能混用？
        不能混用
        malloc是在堆（heap）上分配的内存空间
        new是在自由存储区分配的内存空间
        注意：很多时候，对于堆和自由存储区都不做详细区分

        new在分配内存空间的时候，尤其是在给类/结构体分配内存空间的时候，调用类/结构体的构造函数，用以初始化成员变量
        delete在在释放内存空间的时候，会调用类/结构体的析构函数，用以释放成员的资源
        
        malloc/free则没有这样的功能
        所以在C++中使用new和delete更能体现C++的一些特性，更好的管理内存

栈(stack)：
    特点：
        1> 先进后出的结构（first in last out--FILO）
        2> 用来存放局部变量
        3> 当函数执行结束，会释放栈空间
        4> 由系统自动分配，且由系统自动释放
        5> 大小不由程序员决定

       
